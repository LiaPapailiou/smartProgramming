{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/index';\nimport setAuthToken from './utils/setAuthToken';\nconst initialState = {};\nconst middleware = [thunk];\n\nconst localStorageMiddleware = ({\n  getState\n}) => {\n  return next => action => {\n    const result = next(action);\n    localStorage.setItem('applicationState', JSON.stringify(getState()));\n    return result;\n  };\n};\n\nconst reHydrateStore = () => {\n  // <-- FOCUS HERE\n  if (localStorage.getItem('applicationState') !== null) {\n    return JSON.parse(localStorage.getItem('applicationState')); // re-hydrate the store\n  }\n};\n\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware))); // let currentState = store.getState();\n// store.subscribe(() => {\n//   let previousState = currentState;\n//   currentState = store.getState();\n//   if (previousState.auth.token !== currentState.auth.token) {\n//     const token = currentState.auth.token;\n//     setAuthToken(token);\n//   }\n// });\n\nexport default store;","map":{"version":3,"sources":["C:/Users/ashad/JS_projects/clientProgrammingPlanner/client/src/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunk","rootReducer","setAuthToken","initialState","middleware","localStorageMiddleware","getState","next","action","result","localStorage","setItem","JSON","stringify","reHydrateStore","getItem","parse","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAG,CAACJ,KAAD,CAAnB;;AACA,MAAMK,sBAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC/C,SAAQC,IAAD,IAAWC,MAAD,IAAY;AAC3B,UAAMC,MAAM,GAAGF,IAAI,CAACC,MAAD,CAAnB;AACAE,IAAAA,YAAY,CAACC,OAAb,CAAqB,kBAArB,EAAyCC,IAAI,CAACC,SAAL,CACvCP,QAAQ,EAD+B,CAAzC;AAGA,WAAOG,MAAP;AACD,GAND;AAOD,CARD;;AAUA,MAAMK,cAAc,GAAG,MAAM;AAAE;AAE7B,MAAIJ,YAAY,CAACK,OAAb,CAAqB,kBAArB,MAA6C,IAAjD,EAAuD;AACrD,WAAOH,IAAI,CAACI,KAAL,CAAWN,YAAY,CAACK,OAAb,CAAqB,kBAArB,CAAX,CAAP,CADqD,CACQ;AAE9D;AACF,CAND;;AAOA,MAAME,KAAK,GAAGpB,WAAW,CAACI,WAAD,EAAcE,YAAd,EAA4BJ,mBAAmB,CAACD,eAAe,CAAC,GAAGM,UAAJ,CAAhB,CAA/C,CAAzB,C,CAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,eAAea,KAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index';\r\nimport setAuthToken from './utils/setAuthToken';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\nconst localStorageMiddleware = ({ getState }) => {\r\n  return (next) => (action) => {\r\n    const result = next(action);\r\n    localStorage.setItem('applicationState', JSON.stringify(\r\n      getState()\r\n    ));\r\n    return result;\r\n  };\r\n};\r\n\r\nconst reHydrateStore = () => { // <-- FOCUS HERE\r\n\r\n  if (localStorage.getItem('applicationState') !== null) {\r\n    return JSON.parse(localStorage.getItem('applicationState')); // re-hydrate the store\r\n\r\n  }\r\n};\r\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\r\n\r\n// let currentState = store.getState();\r\n\r\n// store.subscribe(() => {\r\n//   let previousState = currentState;\r\n//   currentState = store.getState();\r\n\r\n//   if (previousState.auth.token !== currentState.auth.token) {\r\n//     const token = currentState.auth.token;\r\n//     setAuthToken(token);\r\n//   }\r\n// });\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}