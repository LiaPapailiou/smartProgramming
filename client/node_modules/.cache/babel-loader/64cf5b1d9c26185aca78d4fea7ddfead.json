{"ast":null,"code":"import React,{useEffect}from'react';import{LineChart,Line,XAxis,YAxis,CartesianGrid,Tooltip,Legend}from'recharts';import{getClientProfile}from'../../actions/profile';import{connect}from'react-redux';import moment from'moment';var OneRMChart=function OneRMChart(_ref){var clientId=_ref.clientId,getClientProfile=_ref.getClientProfile,clientProfile=_ref.profile.clientProfile;useEffect(function(){getClientProfile(clientId);},[getClientProfile,clientId]);var formatXAxis=function formatXAxis(tickItem){return moment(tickItem).format('DD / MMM / YY');};var formatColour=function formatColour(value,entry){var color=entry.color;return/*#__PURE__*/React.createElement(\"span\",{style:{color:color,fontSize:14,paddingRight:'0.25em'}},value);};return/*#__PURE__*/React.createElement(LineChart,{width:550,height:300,data:clientProfile.clientOneRM.reverse(),margin:{top:5,right:15,left:5,bottom:5},className:\"rm-chart\"},/*#__PURE__*/React.createElement(CartesianGrid,{vertical:false,strokeDasharray:\"3 3\"}),/*#__PURE__*/React.createElement(XAxis,{dataKey:\"added\",tickFormatter:formatXAxis,tick:{fontSize:12,fill:'#fff'}}),/*#__PURE__*/React.createElement(YAxis,{unit:\" kg\",tick:{fontSize:12,fill:'#fff'}}),/*#__PURE__*/React.createElement(Tooltip,{labelFormatter:function labelFormatter(t){return new Date(t).toLocaleString();}}),/*#__PURE__*/React.createElement(Legend,{formatter:formatColour}),/*#__PURE__*/React.createElement(Line,{type:\"monotone\",dataKey:\"benchPress\",name:\"Bench Press\",stroke:\"#8884d8\",activeDot:{r:8}}),/*#__PURE__*/React.createElement(Line,{type:\"monotone\",dataKey:\"squat\",name:\"Squat\",stroke:\"#82ca9d\"}));};var mapStateToProps=function mapStateToProps(state){return{profile:state.profile};};export default connect(mapStateToProps,{getClientProfile:getClientProfile})(OneRMChart);","map":{"version":3,"sources":["C:/Users/ashad/JS_projects/clientProgrammingPlanner/client/src/components/clients/OneRMChart.js"],"names":["React","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","getClientProfile","connect","moment","OneRMChart","clientId","clientProfile","profile","formatXAxis","tickItem","format","formatColour","value","entry","color","fontSize","paddingRight","clientOneRM","reverse","top","right","left","bottom","fill","t","Date","toLocaleString","r","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n} from 'recharts';\r\nimport { getClientProfile } from '../../actions/profile';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\n\r\nconst OneRMChart = ({ clientId, getClientProfile, profile: { clientProfile } }) => {\r\n  useEffect(() => {\r\n    getClientProfile(clientId);\r\n  }, [getClientProfile, clientId]);\r\n\r\n  const formatXAxis = (tickItem) => {\r\n    return moment(tickItem).format('DD / MMM / YY');\r\n  };\r\n\r\n  const formatColour = (value, entry) => {\r\n    const { color } = entry;\r\n    return <span style={ { color, fontSize: 14, paddingRight: '0.25em' } }>{ value }</span>;\r\n  };\r\n  return (\r\n    <LineChart\r\n      width={ 550 }\r\n      height={ 300 }\r\n      data={ clientProfile.clientOneRM.reverse() }\r\n      margin={ {\r\n        top: 5, right: 15, left: 5, bottom: 5,\r\n      } }\r\n      className=\"rm-chart\"\r\n    >\r\n      <CartesianGrid vertical={ false } strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"added\" tickFormatter={ formatXAxis } tick={ { fontSize: 12, fill: '#fff' } } />\r\n      <YAxis unit=\" kg\" tick={ { fontSize: 12, fill: '#fff' } } />\r\n      <Tooltip labelFormatter={ (t) => new Date(t).toLocaleString() } />\r\n      <Legend formatter={ formatColour } />\r\n      <Line type=\"monotone\" dataKey=\"benchPress\" name=\"Bench Press\" stroke=\"#8884d8\" activeDot={ { r: 8 } } />\r\n      <Line type=\"monotone\" dataKey=\"squat\" name=\"Squat\" stroke=\"#82ca9d\" />\r\n    </LineChart>\r\n  );\r\n};\r\nOneRMChart.propTypes = {\r\n  getClientProfile: PropTypes.func.isRequired,\r\n  profile: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  profile: state.profile,\r\n});\r\nexport default connect(mapStateToProps, { getClientProfile })(OneRMChart);"]},"metadata":{},"sourceType":"module"}