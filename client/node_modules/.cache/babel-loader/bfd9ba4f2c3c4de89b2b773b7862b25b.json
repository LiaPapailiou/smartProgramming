{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/index';\nimport setAuthToken from './utils/setAuthToken';\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nlet currentState = store.getState();\nstore.subscribe(() => {\n  let previousState = currentState;\n  currentState = store.getState();\n\n  if (previousState.auth.token !== currentState.auth.token) {\n    const token = currentState.auth.token;\n    setAuthToken(token);\n  }\n}); // const middleware = [thunk];\n// function saveToLocalStorage(state) {\n//   try {\n//     const serializedState = JSON.stringify(state);\n//     localStorage.setItem('state', serializedState);\n//   } catch (err) {\n//     console.log(err);\n//   }\n// }\n// function loadFromLocalStorage() {\n//   try {\n//     const serializedState = localStorage.getItem('state');\n//     if (serializedState === null) return undefined;\n//     return JSON.parser(serializedState);\n//   } catch (err) {\n//     console.log(err);\n//     return undefined;\n//   }\n// }\n// const persistedState = loadFromLocalStorage();\n// const store = createStore(rootReducer, persistedState, composeWithDevTools(applyMiddleware(...middleware)));\n// store.subscribe(() => {\n//   saveToLocalStorage(store.getState());\n// });\n\nexport default store;","map":{"version":3,"sources":["C:/Users/ashad/JS_projects/clientProgrammingPlanner/client/src/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunk","rootReducer","setAuthToken","initialState","middleware","store","currentState","getState","subscribe","previousState","auth","token"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAG,CAACJ,KAAD,CAAnB;AAEA,MAAMK,KAAK,GAAGR,WAAW,CACvBI,WADuB,EAEvBE,YAFuB,EAGvBJ,mBAAmB,CAACD,eAAe,CAAC,GAAGM,UAAJ,CAAhB,CAHI,CAAzB;AAOA,IAAIE,YAAY,GAAGD,KAAK,CAACE,QAAN,EAAnB;AAEAF,KAAK,CAACG,SAAN,CAAgB,MAAM;AACpB,MAAIC,aAAa,GAAGH,YAApB;AACAA,EAAAA,YAAY,GAAGD,KAAK,CAACE,QAAN,EAAf;;AACA,MAAIE,aAAa,CAACC,IAAd,CAAmBC,KAAnB,KAA6BL,YAAY,CAACI,IAAb,CAAkBC,KAAnD,EAA0D;AACxD,UAAMA,KAAK,GAAGL,YAAY,CAACI,IAAb,CAAkBC,KAAhC;AACAT,IAAAA,YAAY,CAACS,KAAD,CAAZ;AACD;AACF,CAPD,E,CASA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;;AAGA,eAAeN,KAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index';\r\nimport setAuthToken from './utils/setAuthToken';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\n\r\nlet currentState = store.getState();\r\n\r\nstore.subscribe(() => {\r\n  let previousState = currentState;\r\n  currentState = store.getState();\r\n  if (previousState.auth.token !== currentState.auth.token) {\r\n    const token = currentState.auth.token;\r\n    setAuthToken(token);\r\n  }\r\n});\r\n\r\n// const middleware = [thunk];\r\n\r\n\r\n// function saveToLocalStorage(state) {\r\n//   try {\r\n//     const serializedState = JSON.stringify(state);\r\n//     localStorage.setItem('state', serializedState);\r\n//   } catch (err) {\r\n//     console.log(err);\r\n//   }\r\n// }\r\n\r\n// function loadFromLocalStorage() {\r\n//   try {\r\n//     const serializedState = localStorage.getItem('state');\r\n//     if (serializedState === null) return undefined;\r\n//     return JSON.parser(serializedState);\r\n//   } catch (err) {\r\n//     console.log(err);\r\n//     return undefined;\r\n//   }\r\n// }\r\n\r\n// const persistedState = loadFromLocalStorage();\r\n\r\n// const store = createStore(rootReducer, persistedState, composeWithDevTools(applyMiddleware(...middleware)));\r\n\r\n// store.subscribe(() => {\r\n//   saveToLocalStorage(store.getState());\r\n// });\r\n\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}