{"ast":null,"code":"import{createStore,applyMiddleware}from'redux';import{composeWithDevTools}from'redux-devtools-extension';import thunk from'redux-thunk';import rootReducer from'./reducers/index';import setAuthToken from'./utils/setAuthToken';var initialState={};var middleware=[thunk];var store=createStore(rootReducer,initialState,composeWithDevTools(applyMiddleware.apply(void 0,middleware)));var currentState=store.getState();store.subscribe(function(){var previousState=currentState;currentState=store.getState();if(previousState.auth.token!==currentState.auth.token){var token=currentState.auth.token;setAuthToken(token);}});export default store;","map":{"version":3,"sources":["C:/Users/ashad/JS_projects/clientProgrammingPlanner/client/src/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunk","rootReducer","setAuthToken","initialState","middleware","store","currentState","getState","subscribe","previousState","auth","token"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,KAA6C,OAA7C,CACA,OAASC,mBAAT,KAAoC,0BAApC,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CACA,MAAOC,CAAAA,WAAP,KAAwB,kBAAxB,CACA,MAAOC,CAAAA,YAAP,KAAyB,sBAAzB,CAEA,GAAMC,CAAAA,YAAY,CAAG,EAArB,CAEA,GAAMC,CAAAA,UAAU,CAAG,CAACJ,KAAD,CAAnB,CACA,GAAMK,CAAAA,KAAK,CAAGR,WAAW,CAACI,WAAD,CAAcE,YAAd,CAA4BJ,mBAAmB,CAACD,eAAe,MAAf,QAAmBM,UAAnB,CAAD,CAA/C,CAAzB,CAEA,GAAIE,CAAAA,YAAY,CAAGD,KAAK,CAACE,QAAN,EAAnB,CAEAF,KAAK,CAACG,SAAN,CAAgB,UAAM,CACpB,GAAIC,CAAAA,aAAa,CAAGH,YAApB,CACAA,YAAY,CAAGD,KAAK,CAACE,QAAN,EAAf,CAEA,GAAIE,aAAa,CAACC,IAAd,CAAmBC,KAAnB,GAA6BL,YAAY,CAACI,IAAb,CAAkBC,KAAnD,CAA0D,CACxD,GAAMA,CAAAA,KAAK,CAAGL,YAAY,CAACI,IAAb,CAAkBC,KAAhC,CACAT,YAAY,CAACS,KAAD,CAAZ,CACD,CACF,CARD,EAUA,cAAeN,CAAAA,KAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index';\r\nimport setAuthToken from './utils/setAuthToken';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\r\n\r\nlet currentState = store.getState();\r\n\r\nstore.subscribe(() => {\r\n  let previousState = currentState;\r\n  currentState = store.getState();\r\n\r\n  if (previousState.auth.token !== currentState.auth.token) {\r\n    const token = currentState.auth.token;\r\n    setAuthToken(token);\r\n  }\r\n});\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}