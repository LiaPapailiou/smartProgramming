{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_CLIENT_PROFILE, CLIENT_PROFILE_ERROR, CLEAR_PROFILE, GET_ALL_PROFILES, PROFILES_ERROR } from './types';\nimport { useHistory } from 'react-router-dom'; // Get single profile\n\nexport const getClientProfile = client_id => async dispatch => {\n  try {\n    const res = await axios.get(`/clients/search/${client_id}`);\n    dispatch({\n      type: GET_CLIENT_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: CLIENT_PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get all profiles\n\nexport const getAllProfiles = () => async dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n\n  try {\n    const res = await axios.get(`/clients`);\n    dispatch({\n      type: GET_ALL_PROFILES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILES_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Insert client profile \n\nexport const insertClient = (formData, history, edit) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.put('/clients/insert', formData, config);\n    dispatch({\n      type: GET_CLIENT_PROFILE,\n      payload: res.data\n    });\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.message, 'danger')));\n    }\n\n    dispatch({\n      type: CLIENT_PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/ashad/JS_projects/clientProgrammingPlanner/client/src/actions/profile.js"],"names":["axios","setAlert","GET_CLIENT_PROFILE","CLIENT_PROFILE_ERROR","CLEAR_PROFILE","GET_ALL_PROFILES","PROFILES_ERROR","useHistory","getClientProfile","client_id","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","getAllProfiles","insertClient","formData","history","edit","config","headers","put","push","errors","forEach","error","message"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alert';\r\nimport {\r\n  GET_CLIENT_PROFILE,\r\n  CLIENT_PROFILE_ERROR,\r\n  CLEAR_PROFILE,\r\n  GET_ALL_PROFILES,\r\n  PROFILES_ERROR,\r\n} from './types';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n// Get single profile\r\nexport const getClientProfile = (client_id) => async (dispatch) => {\r\n\r\n  try {\r\n\r\n    const res = await axios.get(`/clients/search/${client_id}`);\r\n    dispatch({\r\n      type: GET_CLIENT_PROFILE,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: CLIENT_PROFILE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Get all profiles\r\nexport const getAllProfiles = () => async (dispatch) => {\r\n  dispatch({ type: CLEAR_PROFILE });\r\n\r\n  try {\r\n\r\n    const res = await axios.get(`/clients`);\r\n    dispatch({\r\n      type: GET_ALL_PROFILES,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: PROFILES_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Insert client profile \r\nexport const insertClient = (formData, history, edit) => async (dispatch) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n    const res = await axios.put('/clients/insert', formData, config);\r\n    dispatch({\r\n      type: GET_CLIENT_PROFILE,\r\n      payload: res.data,\r\n    });\r\n    history.push('/dashboard');\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.message, 'danger')));\r\n    }\r\n    dispatch({\r\n      type: CLIENT_PROFILE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}