{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashad\\\\JS_projects\\\\clientProgrammingPlanner\\\\client\\\\src\\\\components\\\\clients\\\\ClientNotes.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addNotes, getClientProfile } from '../../actions/profile';\nimport { set } from 'mongoose';\n\nconst ClientNotes = ({\n  addNotes,\n  getClientProfile,\n  profile: {\n    clientProfile,\n    loading\n  }\n}) => {\n  const [visible, setVisible] = useState(false);\n  const [formData, setFormData] = useState({\n    notes: ''\n  });\n  const {\n    notes\n  } = formData;\n\n  const onSubmit = e => {\n    e.preventDefault();\n    addNotes(formData, clientProfile._id);\n    setFormData({\n      notes: ''\n    });\n  };\n\n  useEffect(() => {\n    getClientProfile(clientProfile._id);\n    setFormData({\n      notes: loading || !clientProfile.notes ? '' : clientProfile.notes\n    });\n  }, [getClientProfile, clientProfile._id, clientProfile.notes, loading]);\n\n  const onChange = e => setFormData({ ...formData,\n    [e.target.name]: e.target.value\n  });\n\n  const onClick = () => setVisible(!visible);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"note-container\",\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"i\", {\n    class: \"fas fa-plus\",\n    style: {\n      color: '#61c9a8af',\n      fontSize: 15,\n      padding: '0.25em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 58\n    }\n  }), visible ? /*#__PURE__*/React.createElement(\"form\", {\n    className: \"add-notes\",\n    onSubmit: e => onSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    placeholder: \"Add notes...\",\n    cols: \"55\",\n    rows: \"10\",\n    name: \"notes\",\n    value: notes,\n    onChange: e => onChange(e),\n    style: {\n      resize: 'vertical',\n      maxWidth: '100%',\n      backgroundColor: '#00000080'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"calculate\",\n    value: \"Add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  })) : null);\n};\n\nClientNotes.propTypes = {\n  addNotes: PropTypes.func.isRequired,\n  getClientProfile: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  addNotes,\n  getClientProfile\n})(ClientNotes);","map":{"version":3,"sources":["C:/Users/ashad/JS_projects/clientProgrammingPlanner/client/src/components/clients/ClientNotes.js"],"names":["React","useState","useEffect","PropTypes","connect","addNotes","getClientProfile","set","ClientNotes","profile","clientProfile","loading","visible","setVisible","formData","setFormData","notes","onSubmit","e","preventDefault","_id","onChange","target","name","value","onClick","color","fontSize","padding","resize","maxWidth","backgroundColor","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { addNotes, getClientProfile } from '../../actions/profile';\r\nimport { set } from 'mongoose';\r\n\r\nconst ClientNotes = ({ addNotes, getClientProfile, profile: { clientProfile, loading } }) => {\r\n  const [visible, setVisible] = useState(false);\r\n  const [formData, setFormData] = useState({ notes: '' });\r\n  const { notes } = formData;\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    addNotes(formData, clientProfile._id);\r\n    setFormData({ notes: '' });\r\n  };\r\n  useEffect(() => {\r\n    getClientProfile(clientProfile._id);\r\n    setFormData({\r\n      notes: loading || !clientProfile.notes ? '' : clientProfile.notes,\r\n    });\r\n\r\n  }, [getClientProfile, clientProfile._id, clientProfile.notes, loading]);\r\n  const onChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  const onClick = () => setVisible(!visible);\r\n  return (\r\n    <div className=\"note-container\" onClick={ onClick }> <i class=\"fas fa-plus\" style={ { color: '#61c9a8af', fontSize: 15, padding: '0.25em' } }></i>{\r\n      visible ?\r\n        <form className=\"add-notes\" onSubmit={ (e) => onSubmit(e) }>\r\n          <textarea placeholder=\"Add notes...\" cols=\"55\" rows=\"10\" name=\"notes\" value={ notes } onChange={ (e) => onChange(e) } style={ { resize: 'vertical', maxWidth: '100%', backgroundColor: '#00000080' } }>\r\n          </textarea>\r\n          <br />\r\n          <input\r\n            type=\"submit\"\r\n            className=\"calculate\"\r\n            value=\"Add\" />\r\n        </form> : null\r\n    }\r\n\r\n    </div >\r\n  );\r\n};\r\n\r\nClientNotes.propTypes = {\r\n  addNotes: PropTypes.func.isRequired,\r\n  getClientProfile: PropTypes.func.isRequired,\r\n  profile: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  profile: state.profile,\r\n});\r\n\r\nexport default connect(mapStateToProps, { addNotes, getClientProfile })(ClientNotes);\r\n"]},"metadata":{},"sourceType":"module"}