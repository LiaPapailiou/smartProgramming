{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashad\\\\JS_projects\\\\clientProgrammingPlanner\\\\client\\\\src\\\\components\\\\clients\\\\OneRMChart.js\";\nimport React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { getClientProfile } from '../../actions/profile';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nconst OneRMChart = ({\n  profile: {\n    clientProfile\n  }\n}) => {\n  const formatXAxis = tickItem => {\n    return moment(tickItem).format('DD / MMM / YY');\n  };\n\n  const formatColour = (value, entry) => {\n    const {\n      color\n    } = entry;\n    return /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color,\n        fontSize: 14,\n        paddingRight: '0.25em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 12\n      }\n    }, value);\n  };\n\n  const invertedData = clientProfile.clientOneRM.reverse();\n  console.log(invertedData);\n  return /*#__PURE__*/React.createElement(LineChart, {\n    width: 550,\n    height: 300,\n    data: clientProfile.clientOneRM.reverse(),\n    margin: {\n      top: 5,\n      right: 15,\n      left: 5,\n      bottom: 5\n    },\n    className: \"rm-chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    vertical: false,\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"added\",\n    tickFormatter: formatXAxis,\n    tick: {\n      fontSize: 12,\n      fill: '#fff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    unit: \" kg\",\n    tick: {\n      fontSize: 12,\n      fill: '#fff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    labelFormatter: t => new Date(t).toLocaleString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    formatter: formatColour,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"benchPress\",\n    name: \"Bench Press\",\n    stroke: \"#8884d8\",\n    activeDot: {\n      r: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"squat\",\n    name: \"Squat\",\n    stroke: \"#82ca9d\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n};\n\nOneRMChart.propTypes = {\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps)(OneRMChart);","map":{"version":3,"sources":["C:/Users/ashad/JS_projects/clientProgrammingPlanner/client/src/components/clients/OneRMChart.js"],"names":["React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","getClientProfile","connect","PropTypes","moment","OneRMChart","profile","clientProfile","formatXAxis","tickItem","format","formatColour","value","entry","color","fontSize","paddingRight","invertedData","clientOneRM","reverse","console","log","top","right","left","bottom","fill","t","Date","toLocaleString","r","propTypes","object","isRequired","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n} from 'recharts';\r\nimport { getClientProfile } from '../../actions/profile';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\n\r\nconst OneRMChart = ({ profile: { clientProfile } }) => {\r\n\r\n  const formatXAxis = (tickItem) => {\r\n    return moment(tickItem).format('DD / MMM / YY');\r\n  };\r\n\r\n  const formatColour = (value, entry) => {\r\n    const { color } = entry;\r\n    return <span style={ { color, fontSize: 14, paddingRight: '0.25em' } }>{ value }</span>;\r\n  };\r\n  const invertedData = clientProfile.clientOneRM.reverse();\r\n  console.log(invertedData);\r\n  return (\r\n    <LineChart\r\n      width={ 550 }\r\n      height={ 300 }\r\n      data={ clientProfile.clientOneRM.reverse() }\r\n      margin={ {\r\n        top: 5, right: 15, left: 5, bottom: 5,\r\n      } }\r\n      className=\"rm-chart\"\r\n    >\r\n      <CartesianGrid vertical={ false } strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"added\" tickFormatter={ formatXAxis } tick={ { fontSize: 12, fill: '#fff' } } />\r\n      <YAxis unit=\" kg\" tick={ { fontSize: 12, fill: '#fff' } } />\r\n      <Tooltip labelFormatter={ (t) => new Date(t).toLocaleString() } />\r\n      <Legend formatter={ formatColour } />\r\n      <Line type=\"monotone\" dataKey=\"benchPress\" name=\"Bench Press\" stroke=\"#8884d8\" activeDot={ { r: 8 } } />\r\n      <Line type=\"monotone\" dataKey=\"squat\" name=\"Squat\" stroke=\"#82ca9d\" />\r\n    </LineChart>\r\n  );\r\n};\r\nOneRMChart.propTypes = {\r\n  profile: PropTypes.object.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  profile: state.profile,\r\n});\r\nexport default connect(mapStateToProps)(OneRMChart);"]},"metadata":{},"sourceType":"module"}