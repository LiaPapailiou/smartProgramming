{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_EXERCISE_LIBRARY, GET_SINGLE_EXERCISE, EDIT_SINGLE_EXERCISE, DELETE_SINGLE_EXERCISE, GET_EXERCISE_LIBRARY_ERROR } from './types'; // Get all exercises in the library\n\nexport const getExerciseLibrary = () => async dispatch => {\n  try {\n    const res = await axios.get(`/exercise-log`);\n    dispatch({\n      type: GET_EXERCISE_LIBRARY,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_EXERCISE_LIBRARY_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get exercise in the library by ID\n\nexport const getSingleExercise = ex_id => async dispatch => {\n  try {\n    const res = await axios.get(`/exercise-log/search/${ex_id}`);\n    dispatch({\n      type: GET_SINGLE_EXERCISE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_EXERCISE_LIBRARY_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Insert\n\nexport const insertSingleExercise = formData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.put('/exercise-log/insert', formData, config);\n    dispatch({\n      type: GET_SINGLE_EXERCISE,\n      payload: res.data\n    });\n    dispatch(setAlert('Exercise added successfully', 'success'));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: GET_EXERCISE_LIBRARY_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Edit exercise\n\nexport const editSingleExercise = (formData, ex_id) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    await axios.post(`/exercise-log/edit/${ex_id}`, formData, config);\n    dispatch({\n      type: EDIT_SINGLE_EXERCISE,\n      payload: ex_id\n    });\n    dispatch(setAlert('Exercise updated successfully', 'success'));\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: GET_EXERCISE_LIBRARY_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete exercise\n\nexport const deleteSingleExercise = id => async dispatch => {\n  try {\n    await axios.delete(`/exercise-log/delete/${id}`);\n    dispatch({\n      type: DELETE_SINGLE_EXERCISE,\n      payload: id\n    });\n    dispatch(setAlert('Exercise removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: GET_EXERCISE_LIBRARY_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/ashad/JS_projects/clientProgrammingPlanner/client/src/actions/exerciseLibrary.js"],"names":["axios","setAlert","GET_EXERCISE_LIBRARY","GET_SINGLE_EXERCISE","EDIT_SINGLE_EXERCISE","DELETE_SINGLE_EXERCISE","GET_EXERCISE_LIBRARY_ERROR","getExerciseLibrary","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","getSingleExercise","ex_id","insertSingleExercise","formData","config","headers","put","errors","forEach","error","editSingleExercise","post","deleteSingleExercise","id","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alert';\r\nimport {\r\n  GET_EXERCISE_LIBRARY,\r\n  GET_SINGLE_EXERCISE,\r\n  EDIT_SINGLE_EXERCISE,\r\n  DELETE_SINGLE_EXERCISE,\r\n  GET_EXERCISE_LIBRARY_ERROR,\r\n} from './types';\r\n\r\n// Get all exercises in the library\r\nexport const getExerciseLibrary = () => async (dispatch) => {\r\n  try {\r\n\r\n    const res = await axios.get(`/exercise-log`);\r\n    dispatch({\r\n      type: GET_EXERCISE_LIBRARY,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_EXERCISE_LIBRARY_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Get exercise in the library by ID\r\nexport const getSingleExercise = (ex_id) => async (dispatch) => {\r\n  try {\r\n\r\n    const res = await axios.get(`/exercise-log/search/${ex_id}`);\r\n    dispatch({\r\n      type: GET_SINGLE_EXERCISE,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_EXERCISE_LIBRARY_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Insert\r\nexport const insertSingleExercise = (formData) => async (dispatch) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n    const res = await axios.put('/exercise-log/insert', formData, config);\r\n    dispatch({\r\n      type: GET_SINGLE_EXERCISE,\r\n      payload: res.data,\r\n    });\r\n    dispatch(setAlert('Exercise added successfully', 'success'));\r\n\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n    dispatch({\r\n      type: GET_EXERCISE_LIBRARY_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Edit exercise\r\nexport const editSingleExercise = (formData, ex_id) => async (dispatch) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n    await axios.post(`/exercise-log/edit/${ex_id}`, formData, config);\r\n    dispatch({\r\n      type: EDIT_SINGLE_EXERCISE,\r\n      payload: ex_id,\r\n    });\r\n    dispatch(setAlert('Exercise updated successfully', 'success'));\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n    dispatch({\r\n      type: GET_EXERCISE_LIBRARY_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n// Delete exercise\r\nexport const deleteSingleExercise = (id) => async (dispatch) => {\r\n  try {\r\n    await axios.delete(`/exercise-log/delete/${id}`);\r\n    dispatch({\r\n      type: DELETE_SINGLE_EXERCISE,\r\n      payload: id\r\n    });\r\n    dispatch(setAlert('Exercise removed', 'success'));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_EXERCISE_LIBRARY_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}